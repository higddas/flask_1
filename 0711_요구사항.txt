# 0 . 가상환경 만들기
 - 나중에 다른 서버에 이 서비스를 설치하더라도 같이 패키지, 버전을 공유하기 위해
 $ python -m venv 가상환경명
 - scripts > activate.bat 터미널에서 실행
 - pip upgrade
   : python.exe -m pip install --upgrade pip
  - flask
   : pip install flask

# 1. 
woorifisa 폴더에 
app.py로 시작하는 flask 프레임워크를 하나 만들겁니다. 

/about_me

저는 **name 입니다** 

/hello :안녕하세요
/bye : 잘 가세요 

- 한장의 파일로 작성해 보시고
# 2. -> 2_app에 __init__.py 참고
- create_app()  으로 시작하는 플라스크 앱으로 만들어 주시고
    : 모든 객체를 글로벌 속성으로 사용해서 생기는 오류를 막아줌

# 3. Blueprint 를 통해 기능별로 view 분할 - app 폴더 참조
- fisa/ 도메인을 앞에 붙여서 작동하도록 변경해주세요
    - fisa/about_me
    - fisa/hello
    - fisa/bye

# 4. 연습하기(view를 위한 Blueprint 추가)
- 내이름/ 도메인을 앞에 붙여서 작동하도록 변경해주세요
    - 내이름/about_me
    - 내이름/hello
    - 내이름/bye


# 5. flask-imgrate 패키지를 통한 질문-답변 모델 생성
 - 질문 테이블은 
    - 내부적: 번호, 작성자, 내용, 수정여부를 어떻게 기록할 것인지(타임스탬프)
    - 외부적: 번호, 작성자, 내용
 - 답변 테이블은
    - 내부적: 번호, 작성자, 내용, 수정여부를 어떻게 기록할 것인지(타임스탬프), 어떤 질문에 대한 답변인지
    - 외부적: 번호, 작성자, 내용

- config.py에 db에 대한 내용 작성
- __init__.py에게 db에 관한 정보 등록
- ORM을 사용하는 이유: 서로 다른 쿼리를 몰라도 알아서 통역을 해준다는 장점
- ORM 뭐리로 코드를 작성하지만
    - 작업 후 commit()해야 db에 적용
    - commit하기전에 작업내용을 취소하고 싶다면 rollback()을 해줌

- flask, Html, css, javascript 코드 사이에 파이썬 코드를 삽입해서 데이터를 가지고 오기위해 jinja라는 템플릿을 사용
    - jinja 템플릿이 shell 커맨드를 기반으로 한 ORM 사용

MVC
- model.py에 클래스를 만든다
- __init__에 알려준다
- views에서 쓴다고 import

- flask db migrate
- flask db upgrade